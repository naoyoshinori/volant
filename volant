#!/bin/sh

VERSION=0.0.7
DEVICE_NAME=volant

volant_init()
{
  local volant_root=$1
  local volant_mp=$2
  local volantfile=$3
  local image=$4

  if [ "$image" = "" ]; then
    echo "The image is blank. Please set the image."
    exit 1
  fi

  if [ ! -e "$volant_root/.volant" ]; then
    mkdir -p $volant_root/.volant
  fi

  if [ -e "$volant_root/.volant/name" ]; then
    echo "Error creating this container."
    exit 1
  else
    container=vm-`date | md5sum | awk '{print substr($1, 0, 9)}'`
    echo $container > $volant_root/.volant/name
  fi

  if [ ! -e "$volant_root/$volantfile" ]; then
    cat << EOF > $volant_root/$volantfile
#!/bin/sh

EOF
  fi

  lxc init $image $container

  if [ $? -ne 0 ]; then
    echo "Error creating this container."
    exit 1
  fi

  volant_commit $container
}

volant_delete()
{
  local container=$1

  lxc delete $container

  if [ $? -ne 0 ]; then
    echo "Error deleting this container."
    exit 1
  fi

  if [ -e "$volant_root/.volant/name" ]; then
    rm $volant_root/.volant/name
  fi
}

volant_start()
{
  local container=$1
  local volant_root=$2
  local volant_mp=$3
  local revision=`lxc info $container | grep -E 'snap[0-9]+' | tail -n 1 | awk '{print $1}'`

  lxc restore $container $revision

  if [ $? -ne 0 ]; then
    echo "Error while restoring this container."
    exit 1
  fi

  volant_device_add $container $volant_root $volant_mp

  lxc start $container

  if [ $? -ne 0 ]; then
    echo "Error while starting this container."
    exit 1
  fi
}

volant_stop()
{
  local container=$1
  local volant_root=$2
  local volant_mp=$3

  lxc stop $container

  if [ $? -ne 0 ]; then
    echo "Error while stopping this container."
    exit 1
  fi

  volant_device_remove $container $volant_root $volant_mp
}

volant_run()
{
  local container=$1
  local volant_root=$2
  local volant_mp=$3
  local volantfile=$4

  if [ ! -e "$volant_root/$volantfile" ]; then
    echo "This '$volantfile' file does not exist."
    exit 1
  fi

  lxc exec $container -- bash -c "cd $volant_mp; bash $volantfile"
}

volant_exec()
{
  local container=$1
  local volant_root=$2
  local volant_mp=$3
  local home_dir=$4
  shift 4

  lxc exec $container -- bash -c "cd $volant_mp; cd $home_dir; exec $*"
}

volant_commit()
{
  local container=$1

  lxc snapshot $container

  if [ $? -ne 0 ]; then
    echo "Error during snapshot of this container."
    exit 1
  fi
}

volant_rollback()
{
  local container=$1
  local count=`lxc info $container | grep -E 'snap[0-9]+' | awk '{print $1}' | wc -w`

  if [ $count -le 1 ]; then
    echo "This container can not be rolled back any more."
    exit 1
  fi

  local revision=`lxc info $container | grep -E 'snap[0-9]+' | tail -n 1 | awk '{print $1}'`
  lxc delete $container/$revision

  if [ $? -ne 0 ]; then
    echo "Error deleting this container."
    exit 1
  fi

  local revision=`lxc info $container | grep -E 'snap[0-9]+' | tail -n 1 | awk '{print $1}'`
  lxc restore $container $revision

  if [ $? -ne 0 ]; then
    echo "Error while restoring this container."
    exit 1
  fi
}

volant_device_add()
{
  local container=$1
  local volant_root=$2
  local volant_mp=$3

  lxc config device add $container $DEVICE_NAME disk source=$volant_root path=$volant_mp 1> /dev/null

  if [ $? -ne 0 ]; then
    echo "Error adding device to this container."
    exit 1
  fi
}

volant_device_remove()
{
  local container=$1
  local volant_root=$2
  local volant_mp=$3

  lxc config device remove $container $DEVICE_NAME 1> /dev/null

  if [ $? -ne 0 ]; then
    echo "Error deleting device from this container."
    exit 1
  fi
}

volant_exit_if_exists()
{
  local container=$1

  if [ "$container" = "" ]; then
    return 0
  fi

  local name=$(lxc list $container --format csv -c n)

  if [ "$name" != "" ]; then
    echo "This container exists."
    exit 1
  fi
}

volant_exit_if_not_exists()
{
  local container=$1

  if [ "$container" = "" ]; then
    echo "This container does not exist."
    exit 1
  fi

  local name=$(lxc list $container --format csv -c n)

  if [ "$name" = "" ]; then
    echo "This container does not exist."
    exit 1
  fi
}

volant_exit_if_started()
{
  local container=$1
  local status=$(lxc list $container --format csv -c s)

  if [ "$status" = "RUNNING" ]; then
    echo "This container is running."
    exit 1
  fi
}

volant_exit_if_stopped()
{
  local container=$1
  local status=$(lxc list $container --format csv -c s)

  if [ "$status" = "STOPPED" ]; then
    echo "This container is stopped."
    exit 1
  fi
}

usage()
{
  cat <<EOF
Usage:

  volant <command> <arguments...> [options...]

Description:

  This 'volant' creates a container with immutable lxc. This container can be repeatedly tested.

Command:

  volant init <image>

  volant delete

  volant start

  volant stop

  volant status

  volant run

  volant exec [-d|--home-dir path] -- <arguments...>

  volant login [-d|--home-dir path]

  volant commit

  volant rollback

  volant info

  volant list

Options:

  -v, --version             this version

  -h, --hellp               print this help text
EOF
}

version()
{
  echo "volant version $VERSION"
}

for arg in $@
do
  case $arg in
    init|delete| \
    start|stop|status| \
    run|exec| \
    login| \
    commit|rollback| \
    info|list)
      command=$arg
      shift
      ;;
    -C=*)
      volant_root=${arg#*=}
      shift
      ;;
    -d=*|--home-dir=*)
      home_dir=${arg#*=}
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      version
      exit 0
      ;;
    --)
      shift
      ARGV=$*
      break
      ;;
    *)
      break
      ;;
  esac
done

if [ "$command" = "" ]; then
  usage && exit 1
fi

if [ "$volant_root" = "" ]; then
  volant_root=`pwd`
fi

if [ "$volant_mp" = "" ]; then
  volant_mp=/volant
fi

if [ "$home_dir" = "" ]; then
  home_dir=.
fi

if [ -e "$volant_root/.volant/name" ]; then
  container=`cat $volant_root/.volant/name`
else
  container=""
fi

if [ "$volantfile" = "" ]; then
  volantfile=Volantfile.sh
fi

case "$command" in
  init)
    volant_exit_if_exists $container
    volant_init $volant_root $volant_mp $volantfile $*
    ;;
  delete)
    volant_exit_if_not_exists $container
    volant_exit_if_started $container
    volant_delete $container
    ;;
  start)
    volant_exit_if_not_exists $container
    volant_exit_if_started $container
    volant_start $container $volant_root $volant_mp
    ;;
  stop)
    volant_exit_if_not_exists $container
    volant_exit_if_stopped $container
    volant_stop $container $volant_root $volant_mp
    ;;
  status)
    volant_exit_if_not_exists $container
    lxc list $container --format csv -c s
    ;;
  run)
    volant_exit_if_not_exists $container
    volant_exit_if_stopped $container
    volant_run $container $volant_root $volant_mp $volantfile
    ;;
  exec)
    volant_exit_if_not_exists $container
    volant_exit_if_stopped $container
    volant_exec $container $volant_root $volant_mp $home_dir $ARGV
    ;;
  login)
    volant_exit_if_not_exists $container
    volant_exit_if_stopped $container
    volant_exec $container $volant_root $volant_mp $home_dir bash
    ;;
  commit)
    volant_exit_if_not_exists $container
    volant_exit_if_started $container
    volant_commit $container
    ;;
  rollback)
    volant_exit_if_not_exists $container
    volant_exit_if_started $container
    volant_rollback $container
    ;;
  info)
    volant_exit_if_not_exists $container
    lxc info $container
    ;;
  list)
    lxc list
    ;;
  *)
    usage && exit 1
    ;;
esac

